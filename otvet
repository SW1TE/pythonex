# 1 задание
import math


def get_part_1(x):
    numerator = ((x ** 3 / 9) - 0.01) ** 3
    return numerator / 61


def get_part_2(y, z):
    numerator = (82 * y + (z ** 3 / 18))**5
    return numerator


def get_part_3(y, x, z):
    numerator = (math.atan(61 * z ** 2 + y ** 3 + 0.02)) ** 2 + x ** 6
    denumerator = (92 * y ** 3 + z + x ** 2) / 18
    return numerator / denumerator


def main(z, y, x):
    return get_part_1(x) - get_part_2(y, z) - get_part_3(y, x, z)


if __name__ == '__main__':
    print("{:.2e}".format(main(-0.23, 0.78, -0.59)))
    print("{:.2e}".format(main(-0.96, 0.78, -0.16)))
    print("{:.2e}".format(main(0.6, 0.65, -0.62)))
    print("{:.2e}".format(main(-0.73, -0.98, 0.83)))
    print("{:.2e}".format(main(0.38, 0.43, -0.16)))
   
# 2 задание
import math


def main(x):
    if x < 46:
        final = 55 * (21 * x ** 3) ** 4 + (math.exp(x ** 2
                                                    - 87 * x ** 3 - x)) ** 6
    elif x >= 46 and x < 107:
        final = x ** 10 - 81 * math.floor(x ** 2)
    elif x >= 107 and x < 177:
        final = 5 * (x ** 2 + 39 * x + 1) ** 4 + 0.02 + 61 * x ** 5
    elif x >= 177 and x < 196:
        final = 12 + ((24 * x ** 2 + x) ** 6) / 64 + x ** 3
    else:
        final = 96 * x ** 3 + 80
    return final
# 3 задание 
import math


def sum1(a, x):
    sum = 0
    for j in range(1, a + 1):
        sum += 25 * x ** 5 + 99 * j ** 2 + (((math.atan(j ** 3 / 81)) ** 3) / 88)
    return sum


def sum2(m, b, n, y):
    sum = 0
    for k in range(1, n + 1):
        for i in range(1, b + 1):
            for c in range(1, m + 1):
                sum += 30 * math.atan(k) ** 2 + (75 * i + c ** 3 + 77 * y ** 2) ** 4
    return sum


def main(a, x, m, b, n, y):
    return sum1(a, x) + sum2(m, b, n, y)


if __name__ == '__main__':
    print("{:.2e}".format(main(7, -0.58, 4, 6, 5, -0.73)))
    print("{:.2e}".format(main(3, 0.99, 5, 7, 5, -0.88)))
    print("{:.2e}".format(main(3, 0.67, 4, 3, 4, -0.5)))
    print("{:.2e}".format(main(5, -0.81, 3, 8, 5, -0.01)))
    print("{:.2e}".format(main(4, 0.52, 6, 2, 2, -0.49)))
# Задание 4
import math


def dec(n):
    if n == 0:
        return -0.85
    elif n == 1:
        return 0.01
    elif n >= 2:
        return math.tan(dec(n - 2) + (dec(n - 1) ** 2 / 15)
                        + (dec(n - 1) ** 3 / 58)) ** 2


def main(n):
    return dec(n)


if __name__ == '__main__':
    print("{:.2e}".format(main(2)))
    print("{:.2e}".format(main(7)))
    print("{:.2e}".format(main(9)))
    print("{:.2e}".format(main(3)))
    print("{:.2e}".format(main(6)))
# Задание 5 
from math import *


def main(z, x, y):
    n = len(z)
    f = 0
    for i in range(1, n + 1):
        f += pow(92 * z[n + 1 - (ceil(i / 4)) - 1] +
                 95 * pow(y[i - 1], 2) + pow(x[n + 1 - i - 1], 3), 2)
    return f
------------------------------------
import math


def main(z, y, x):
    f = 0.0
    for i in range(len(z)):
        f = f + ((x[i] ** 3 - 26 * z[int(i / 3)] - 2 * y[i] ** 2) ** 2)
    return 42 * f
------------------------------------
import math


def main(z, y, x):
    f = 0.0
    n = len(x)
    for i in range(1, n + 1):
        p1 = 19 * z[int(math.ceil(i / 3.0)) - 1] + x[n + 1 - i - 1] ** 2
        p2 = 10 * y[int(n + 1 - (math.ceil(i/4)) - 1)] **3
        f = f + (p1 + p2)**7
    return f
# Задание 6 
from typing import List

tree = {
    "1995": {
        "2001": {
            "2012": 0,
            "1999": 1
        },
        "1983": {
            "2012": 2,
            "1999": 3
        }
    },
    "2004": {
        "D": 7,
        "TOM": {
            "2012": 8
        }
    }
}


def main(arr: List) -> int:
    global tree
    step = tree
    while True:
        for item in arr[::-1]:
            key = str(item)
            if key in step.keys():
                step = step[key]
            if isinstance(step, int):
                return step
# Задание 7 
def main(x):
    a = x & 0b111111111111111
    b = (x >> 15) & 0b111111
    c = (x >> 21) & 0b111111111
    d = (x >> 30) & 0b1
    e = (x >> 31) & 0b1
    res = e | (c << 1) | (d << 10) | (b << 11) | (a << 17)
    return res

# Задание 8
--------------словарь

text ="""do [ define reat_191 |>riage; ]. [ define rema_252 |> iner; ].[define arce |> arsove; ]. end"""
#                    value     key                 value    key

def main(text_str):
    text_list = text_str.split('.')
    text_list.pop(len(text_list)-1)

    _dict = {}
    for text in text_list:

        value = text[text.find('define')+6:text.find('|')]
        value = value.strip()

        key = text[text.find('>')+1:text.find(';')]
        key = key.strip()

        _dict[key] = value

    return _dict
======================================список
def main(text_str):
    text_list = text_str.split(';')
    text_list.pop(len(text_list)-1)

    _dict = {}
    for text in text_list:
        key = text[text.find('let')+3:text.find('<=')]
        key = key.strip()

        value = text[text.find('list(')+5:text.find(')')]
        value_list = value.split(',')

        _list = []
        for v in value_list:
            v = v.strip()
            _list.append(v)

        _dict[key] = _list

    return _dict
-----------------------------------------------------------replace
text = """<block><block> declare q(oninti_313) :=[ 'veus_80' , 'teesin', 'dira_86' ]</block>,<block>declare q(endi):= [ 'enxe', 'quma', 'leveri' ,'cema' ] </block>, <block>declare q(quti_20):= [
'xearza_619', 'tezate_652'] </block>, <block> declare q(zatibi_858) :=
[ 'arza' , 'aris' ] </block>, </block>"""
def main(text_str):
    text_list = text_str.split('</block>,')
    text_list.pop(len(text_list)-1)

    _dict = {}
    for text in text_list:
        key = text[text.find('q(')+2:text.find(')')]
        key = key.strip()

        value = text[text.find('[')+1:text.find(']')]
        value_list = value.split(',')

        _list = []
        for v in value_list:
            v = v.replace("'", "")
            v = v.strip()
            _list.append(v)

        _dict[key] = _list

    return _dict


print(main(text))

# Задание 9

from abc import ABC, abstractmethod


class P(ABC):
    @abstractmethod
    def cast(self, current) -> int:
        pass

    @abstractmethod
    def trash(self, current) -> int:
        pass

    @abstractmethod
    def reset(self, current) -> int:
        pass


class A(P):
    def cast(self, current) -> int:
        current.current = B()
        return 0

    def trash(self, current) -> int:
        current.current = C()
        return 1

    def reset(self, current) -> int:
        return 2


class G(P):
    def cast(self, current) -> int:
        pass

    def trash(self, current) -> int:
        pass

    def reset(self, current) -> int:
        pass


class FiniteStateMachine:
    def __init__(self) -> None:
        self.current = A()

    def cast(self) -> int:
        return self.current.cast(self)

    def trash(self) -> int:
        return self.current.trash(self)

    def reset(self) -> int:
        return self.current.reset(self)


def main() -> FiniteStateMachine:
    return FiniteStateMachine()

